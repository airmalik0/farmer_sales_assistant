import httpx
import asyncio
from typing import Optional, Dict, Any
from config import BACKEND_URL


class APIClient:
    def __init__(self):
        self.base_url = BACKEND_URL
        self.client = httpx.AsyncClient(timeout=30.0)

    async def close(self):
        await self.client.aclose()

    async def get_or_create_client(self, telegram_id: int, first_name: str = None, 
                                 last_name: str = None, username: str = None) -> Optional[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
            response = await self.client.get(f"{self.base_url}/api/v1/clients/telegram/{telegram_id}")
            if response.status_code == 200:
                return response.json()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            client_data = {
                "telegram_id": telegram_id,
                "first_name": first_name,
                "last_name": last_name,
                "username": username
            }
            response = await self.client.post(f"{self.base_url}/api/v1/clients/", json=client_data)
            if response.status_code == 200:
                return response.json()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {e}")
        
        return None

    async def create_message(self, client_id: int, sender: str, content_type: str, content: str) -> Optional[Dict[Any, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            message_data = {
                "client_id": client_id,
                "sender": sender,
                "content_type": content_type,
                "content": content
            }
            response = await self.client.post(f"{self.base_url}/api/v1/messages/", json=message_data)
            if response.status_code == 200:
                return response.json()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return None

    async def get_all_clients(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            response = await self.client.get(f"{self.base_url}/api/v1/clients/")
            if response.status_code == 200:
                return response.json()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        
        return []

    async def farmer_broadcast(self, content_type: str, content: str, include_greeting: bool = True) -> Optional[Dict[Any, Any]]:
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —Ñ–µ—Ä–º–µ—Ä–∞ —á–µ—Ä–µ–∑ API"""
        try:
            broadcast_data = {
                "content_type": content_type,
                "content": content,
                "include_greeting": include_greeting
            }
            response = await self.client.post(f"{self.base_url}/api/v1/telegram/broadcast", json=broadcast_data)
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 400:
                # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                error_data = response.json()
                return {
                    "success": False,
                    "error": "validation_failed",
                    "message": f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!\n\n{error_data.get('detail', '–ù–µ –≤—Å–µ –∏–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–æ–±—Ä–µ–Ω—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.')}\n\nüí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤."
                }
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                return {
                    "success": False,
                    "error": "api_error",
                    "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
                }
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —á–µ—Ä–µ–∑ API: {e}")
            return {
                "success": False,
                "error": "network_error", 
                "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
            }
        
        return None

    async def validate_broadcast_clients(self) -> Optional[Dict[Any, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        try:
            response = await self.client.get(f"{self.base_url}/api/v1/telegram/broadcast/validate")
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 404:
                return {
                    "total_clients": 0,
                    "clients_ready": 0,
                    "clients_without_names": [],
                    "clients_with_unapproved_names": [],
                    "can_broadcast": False
                }
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        
        return None

    async def get_greeting(self) -> Optional[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            response = await self.client.get(f"{self.base_url}/api/v1/settings/greeting")
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return None

    async def set_greeting(self, greeting_text: str, enabled: bool = True) -> Optional[Dict[Any, Any]]:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            data = {
                "greeting_text": greeting_text,
                "enabled": enabled
            }
            response = await self.client.post(f"{self.base_url}/api/v1/settings/greeting", json=data)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return None

    async def update_greeting(self, greeting_text: str = None, enabled: bool = None) -> Optional[Dict[Any, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            data = {}
            if greeting_text is not None:
                data["greeting_text"] = greeting_text
            if enabled is not None:
                data["enabled"] = enabled
            
            response = await self.client.put(f"{self.base_url}/api/v1/settings/greeting", json=data)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return None

    async def clear_greeting(self) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            response = await self.client.delete(f"{self.base_url}/api/v1/settings/greeting")
            return response.status_code == 200
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return False

    async def send_message_to_client(self, telegram_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ API (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        return True