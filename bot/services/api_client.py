import httpx
import asyncio
from typing import Optional, Dict, Any
from config import BACKEND_URL


class APIClient:
    def __init__(self):
        self.base_url = BACKEND_URL
        self.client = httpx.AsyncClient(timeout=30.0)

    async def close(self):
        await self.client.aclose()

    async def get_or_create_client(self, telegram_id: int, first_name: str = None, 
                                 last_name: str = None, username: str = None) -> Optional[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
            response = await self.client.get(f"{self.base_url}/api/v1/clients/telegram/{telegram_id}")
            if response.status_code == 200:
                return response.json()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            client_data = {
                "telegram_id": telegram_id,
                "first_name": first_name,
                "last_name": last_name,
                "username": username
            }
            response = await self.client.post(f"{self.base_url}/api/v1/clients/", json=client_data)
            if response.status_code == 200:
                return response.json()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {e}")
        
        return None

    async def create_message(self, client_id: int, sender: str, content_type: str, content: str) -> Optional[Dict[Any, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            message_data = {
                "client_id": client_id,
                "sender": sender,
                "content_type": content_type,
                "content": content
            }
            response = await self.client.post(f"{self.base_url}/api/v1/messages/", json=message_data)
            if response.status_code == 200:
                return response.json()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return None

    async def get_all_clients(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            response = await self.client.get(f"{self.base_url}/api/v1/clients/")
            if response.status_code == 200:
                return response.json()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        
        return []

    async def farmer_broadcast(self, content_type: str, content: str, include_greeting: bool = True) -> Optional[Dict[Any, Any]]:
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —Ñ–µ—Ä–º–µ—Ä–∞ —á–µ—Ä–µ–∑ API"""
        try:
            broadcast_data = {
                "content_type": content_type,
                "content": content,
                "include_greeting": include_greeting
            }
            response = await self.client.post(f"{self.base_url}/api/v1/telegram/broadcast", json=broadcast_data)
            
            if response.status_code == 200:
                return response.json()
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ API
                return self._handle_api_error(response)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —á–µ—Ä–µ–∑ API: {e}")
            return {
                "success": False,
                "error": "network_error", 
                "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
            }
        
        return None

    async def validate_broadcast_clients(self) -> Optional[Dict[Any, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        try:
            response = await self.client.post(f"{self.base_url}/api/v1/telegram/validate-broadcast")
            if response.status_code == 200:
                return response.json()
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                return self._handle_api_error(response)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return {
                "total_clients": 0,
                "clients_ready": 0,
                "clients_without_names": [],
                "clients_with_unapproved_names": [],
                "can_broadcast": False
            }
    
    def _handle_api_error(self, response) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            error_data = response.json()
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            if isinstance(error_data, dict) and "error" in error_data:
                error_info = error_data["error"]
                error_code = error_info.get("code", "UNKNOWN")
                error_message = error_info.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                error_details = error_info.get("details", {})
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_message = self._create_user_friendly_message(error_code, error_message, error_details)
                
                return {
                    "success": False,
                    "error": error_code.lower(),
                    "message": user_message
                }
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –æ—à–∏–±–∫–∞ —Å detail
            elif isinstance(error_data, dict) and "detail" in error_data:
                detail = error_data["detail"]
                
                # –ï—Å–ª–∏ detail —Ç–æ–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                if isinstance(detail, dict) and "error" in detail:
                    error_info = detail["error"]
                    error_code = error_info.get("code", "UNKNOWN")
                    error_message = error_info.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    error_details = error_info.get("details", {})
                    
                    user_message = self._create_user_friendly_message(error_code, error_message, error_details)
                    
                    return {
                        "success": False,
                        "error": error_code.lower(),
                        "message": user_message
                    }
                else:
                    # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return {
                        "success": False,
                        "error": "api_error",
                        "message": f"‚ùå –û—à–∏–±–∫–∞: {detail}"
                    }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API: {e}")
        
        # Fallback –¥–ª—è –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        return {
            "success": False,
            "error": "api_error",
            "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–¥: {response.status_code})"
        }
    
    def _create_user_friendly_message(self, error_code: str, error_message: str, error_details: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏"""
        
        if error_code == "NO_CLIENTS":
            return (
                "‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞</b>\n\n"
                "üîç <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
                "üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç—É\n"
                "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É\n"
                "‚Ä¢ –ò–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç—ã —Å–∞–º–∏ –æ–±—Ä–∞—Ç—è—Ç—Å—è"
            )
        
        elif error_code == "CLIENTS_NOT_APPROVED":
            unapproved_count = error_details.get("clients_with_unapproved_names", 0)
            without_names_count = error_details.get("clients_without_names", 0)
            
            issues = []
            if without_names_count > 0:
                issues.append(f"‚Ä¢ {without_names_count} –∫–ª–∏–µ–Ω—Ç(–æ–≤) –±–µ–∑ –∏–º–µ–Ω–∏")
            if unapproved_count > 0:
                issues.append(f"‚Ä¢ {unapproved_count} –∫–ª–∏–µ–Ω—Ç(–æ–≤) —Å –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏")
            
            return (
                "‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
                "üîç <b>–ü—Ä–æ–±–ª–µ–º—ã:</b>\n" + "\n".join(issues) + "\n\n"
                "üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –û–¥–æ–±—Ä–∏—Ç–µ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                "‚Ä¢ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
            )
        
        elif error_code == "BROADCAST_FAILED":
            suggestion = error_details.get("suggestion", "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
            return (
                "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                f"üîç <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}\n\n"
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {suggestion}"
            )
        
        else:
            # –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
            suggestion = error_details.get("suggestion", "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return (
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}\n\n"
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {suggestion}"
            )

    async def get_greeting(self) -> Optional[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            response = await self.client.get(f"{self.base_url}/api/v1/settings/greeting")
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return None

    async def set_greeting(self, greeting_text: str, enabled: bool = True) -> Optional[Dict[Any, Any]]:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            data = {
                "greeting_text": greeting_text,
                "enabled": enabled
            }
            response = await self.client.post(f"{self.base_url}/api/v1/settings/greeting", json=data)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return None

    async def update_greeting(self, greeting_text: str = None, enabled: bool = None) -> Optional[Dict[Any, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            data = {}
            if greeting_text is not None:
                data["greeting_text"] = greeting_text
            if enabled is not None:
                data["enabled"] = enabled
            
            response = await self.client.put(f"{self.base_url}/api/v1/settings/greeting", json=data)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return None

    async def clear_greeting(self) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            response = await self.client.delete(f"{self.base_url}/api/v1/settings/greeting")
            return response.status_code == 200
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        return False

    async def send_message_to_client(self, telegram_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ API (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        return True