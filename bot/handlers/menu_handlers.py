from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from services.message_handler import MessageHandler
from config import FARMER_TELEGRAM_ID
from states.broadcast_states import BroadcastStates
from keyboards.inline_keyboards import (
    get_main_menu_keyboard,
    get_broadcast_menu_keyboard,
    get_greeting_menu_keyboard,
    get_preview_keyboard,
    get_greeting_preview_keyboard,
    get_cancel_keyboard,
    get_back_keyboard
)


class MenuHandlers:
    def __init__(self, message_handler: MessageHandler):
        self.message_handler = message_handler

    async def cmd_menu(self, message: types.Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if message.from_user.id != FARMER_TELEGRAM_ID:
            return
        
        await state.set_state(BroadcastStates.main_menu)
        await message.answer(
            "üåæ <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )

    async def main_menu_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if callback.from_user.id != FARMER_TELEGRAM_ID:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é")
            return

        await callback.answer()

        if callback.data == "create_broadcast":
            await state.set_state(BroadcastStates.create_broadcast)
            await callback.message.edit_text(
                "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=get_broadcast_menu_keyboard()
            )

        elif callback.data == "greeting_menu":
            await state.set_state(BroadcastStates.greeting_menu)
            await callback.message.edit_text(
                "üëã <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_greeting_menu_keyboard()
            )

        elif callback.data == "greeting_status":
            try:
                greeting_data = await self.message_handler.api_client.get_greeting()
                if greeting_data:
                    if greeting_data.get("is_custom", False):
                        text = f"üìù <b>–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>\n\n{greeting_data['greeting_text']}\n\n<i>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ [–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞] –∏ [–§–∞–º–∏–ª–∏—è –ö–ª–∏–µ–Ω—Ç–∞] –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞</i>"
                    else:
                        text = f"üìù <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>\n\n{greeting_data['greeting_text']}\n\n<i>–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</i>"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            await callback.message.edit_text(text, reply_markup=get_back_keyboard())

        elif callback.data == "validate_clients":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API
            try:
                result = await self.message_handler.api_client.validate_broadcast_clients()
                if result:
                    text = f"üîç <b>–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n\n"
                    text += f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {result['total_clients']}\n"
                    text += f"‚úÖ –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: {result['clients_ready']}\n"
                    
                    if result['clients_without_names']:
                        text += f"‚ùå –ë–µ–∑ –∏–º–µ–Ω–∏: {len(result['clients_without_names'])}\n"
                    
                    if result['clients_with_unapproved_names']:
                        text += f"‚è≥ –ò–º–µ–Ω–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã: {len(result['clients_with_unapproved_names'])}\n"
                    
                    if result['can_broadcast']:
                        text += "\n‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞!</b>"
                    else:
                        text += "\n‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞</b>\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            await callback.message.edit_text(text, reply_markup=get_back_keyboard())

        elif callback.data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)
            await self.show_main_menu(callback.message, state)

    async def broadcast_menu_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        await callback.answer()

        if callback.data == "broadcast_with_greeting":
            await state.update_data(include_greeting=True)
            await state.set_state(BroadcastStates.waiting_for_content)
            await callback.message.edit_text(
                "‚úèÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –§–æ—Ç–æ\n"
                "‚Ä¢ –í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n\n"
                "<i>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –° –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º</i>",
                reply_markup=get_cancel_keyboard()
            )

        elif callback.data == "broadcast_without_greeting":
            await state.update_data(include_greeting=False)
            await state.set_state(BroadcastStates.waiting_for_content)
            await callback.message.edit_text(
                "‚úèÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –§–æ—Ç–æ\n"
                "‚Ä¢ –í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n\n"
                "<i>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ë–ï–ó –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</i>",
                reply_markup=get_cancel_keyboard()
            )

        elif callback.data == "back_to_main":
            await self.show_main_menu(callback.message, state)

    async def greeting_menu_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        await callback.answer()

        if callback.data == "set_greeting":
            await state.set_state(BroadcastStates.waiting_for_greeting)
            await callback.message.edit_text(
                "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                "‚Ä¢ <code>[–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞]</code> - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞\n"
                "‚Ä¢ <code>[–§–∞–º–∏–ª–∏—è –ö–ª–∏–µ–Ω—Ç–∞]</code> - —Ñ–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä: <i>–ü—Ä–∏–≤–µ—Ç, [–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞]! –ö–∞–∫ –¥–µ–ª–∞?</i>",
                reply_markup=get_cancel_keyboard()
            )

        elif callback.data == "clear_greeting":
            try:
                result = await self.message_handler.api_client.clear_greeting()
                if result:
                    text = "üóëÔ∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—á–∏—â–µ–Ω–æ</b>\n\n–¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            await callback.message.edit_text(text, reply_markup=get_back_keyboard())

        elif callback.data == "show_greeting":
            try:
                greeting_data = await self.message_handler.api_client.get_greeting()
                if greeting_data:
                    if greeting_data.get("is_custom", False):
                        text = f"üìù <b>–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>\n\n{greeting_data['greeting_text']}"
                    else:
                        text = f"üìù <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>\n\n{greeting_data['greeting_text']}"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            await callback.message.edit_text(text, reply_markup=get_back_keyboard())

        elif callback.data == "back_to_main":
            await self.show_main_menu(callback.message, state)



    async def handle_broadcast_content(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if message.from_user.id != FARMER_TELEGRAM_ID:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type, content = self._extract_content(message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            content_type=content_type,
            content=content
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        data = await state.get_data()
        include_greeting = data.get("include_greeting", False)
        
        preview_text = "üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        
        if include_greeting:
            try:
                greeting_data = await self.message_handler.api_client.get_greeting()
                greeting_text = greeting_data.get("greeting_text", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, [–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞], –∫–∞–∫ –≤—ã?") if greeting_data else "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, [–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞], –∫–∞–∫ –≤—ã?"
            except:
                greeting_text = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, [–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞], –∫–∞–∫ –≤—ã?"
            
            preview_text += f"üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>\n{greeting_text}\n\n"
        
        preview_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n"
        
        if content_type == "text":
            preview_text += content
        else:
            preview_text += f"<i>{self._get_content_description(content_type)}</i>"
        
        await state.set_state(BroadcastStates.preview_broadcast)
        await message.answer(preview_text, reply_markup=get_preview_keyboard())

    async def handle_greeting_content(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        if message.from_user.id != FARMER_TELEGRAM_ID:
            return

        if not message.text:
            await message.answer("‚ùå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
            return

        greeting = message.text.strip()
        await state.update_data(greeting=greeting)
        
        preview_text = f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
        preview_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{greeting}\n\n"
        preview_text += "<i>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ [–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞] –∏ [–§–∞–º–∏–ª–∏—è –ö–ª–∏–µ–Ω—Ç–∞] –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞</i>"
        
        await state.set_state(BroadcastStates.preview_greeting)
        await message.answer(preview_text, reply_markup=get_greeting_preview_keyboard())

    async def preview_callbacks(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        await callback.answer()

        if callback.data == "confirm_send":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            data = await state.get_data()
            try:
                result = await self.message_handler.api_client.farmer_broadcast(
                    content_type=data["content_type"],
                    content=data["content"],
                    include_greeting=data.get("include_greeting", False)
                )
                
                if result and result.get("success", True):
                    text = f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n{result.get('message', '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')}"
                else:
                    text = f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n{result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    
            except Exception as e:
                text = f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            
            await callback.message.edit_text(text, reply_markup=get_back_keyboard())
            await state.clear()

        elif callback.data == "edit_content":
            await state.set_state(BroadcastStates.waiting_for_content)
            data = await state.get_data()
            include_greeting = data.get("include_greeting", False)
            greeting_text = "–° –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º" if include_greeting else "–ë–ï–ó –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
            
            await callback.message.edit_text(
                f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</b>\n\n<i>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç {greeting_text}</i>",
                reply_markup=get_cancel_keyboard()
            )

        elif callback.data == "cancel_broadcast":
            await self.show_main_menu(callback.message, state)

        elif callback.data == "save_greeting":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            data = await state.get_data()
            try:
                result = await self.message_handler.api_client.set_greeting(data["greeting"], enabled=True)
                if result:
                    text = f"‚úÖ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {data['greeting']}"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            await callback.message.edit_text(text, reply_markup=get_back_keyboard())
            await state.clear()

        elif callback.data == "edit_greeting":
            await state.set_state(BroadcastStates.waiting_for_greeting)
            await callback.message.edit_text(
                "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>",
                reply_markup=get_cancel_keyboard()
            )

        elif callback.data == "cancel_greeting":
            await self.show_main_menu(callback.message, state)

    async def cancel_action(self, callback: types.CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        await callback.answer()
        await self.show_main_menu(callback.message, state)
    
    async def back_to_main_action(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        await callback.answer()
        await self.show_main_menu(callback.message, state)

    async def show_main_menu(self, message, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.set_state(BroadcastStates.main_menu)
        if hasattr(message, 'edit_text'):
            await message.edit_text(
                "üåæ <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "üåæ <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )

    def _extract_content(self, message: types.Message):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.text:
            return "text", message.text
        elif message.voice:
            return "voice", f"voice_file_id:{message.voice.file_id}"
        elif message.video_note:
            return "video_note", f"video_note_file_id:{message.video_note.file_id}"
        elif message.document:
            return "document", f"document_file_id:{message.document.file_id}, filename:{message.document.file_name}"
        elif message.photo:
            return "photo", f"photo_file_id:{message.photo[-1].file_id}"
        else:
            return "other", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"

    def _get_content_description(self, content_type: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        descriptions = {
            "voice": "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "video_note": "–í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫",
            "document": "–î–æ–∫—É–º–µ–Ω—Ç",
            "photo": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
            "other": "–î—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞"
        }
        return descriptions.get(content_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø") 