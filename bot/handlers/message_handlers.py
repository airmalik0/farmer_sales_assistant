from aiogram import Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from services.message_handler import MessageHandler
from config import FARMER_TELEGRAM_ID
from states.broadcast_states import BroadcastStates
from handlers.menu_handlers import MenuHandlers


def setup_handlers(dp: Dispatcher, message_handler: MessageHandler):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    menu_handlers = MenuHandlers(message_handler)

    @dp.message(Command("start"))
    async def start_handler(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if message.from_user.id == FARMER_TELEGRAM_ID:
            # –§–µ—Ä–º–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await menu_handlers.cmd_menu(message, state)
        else:
            # –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await message_handler.handle_client_message(
                telegram_id=message.from_user.id,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                username=message.from_user.username,
                content_type="text",
                content="/start"
            )

    @dp.message(Command("menu"))
    async def menu_command(message: types.Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await menu_handlers.cmd_menu(message, state)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    @dp.callback_query(StateFilter(BroadcastStates.main_menu))
    async def main_menu_callbacks(callback: types.CallbackQuery, state: FSMContext):
        await menu_handlers.main_menu_callback(callback, state)

    @dp.callback_query(StateFilter(BroadcastStates.create_broadcast))
    async def broadcast_menu_callbacks(callback: types.CallbackQuery, state: FSMContext):
        await menu_handlers.broadcast_menu_callback(callback, state)

    @dp.callback_query(StateFilter(BroadcastStates.greeting_menu))
    async def greeting_menu_callbacks(callback: types.CallbackQuery, state: FSMContext):
        await menu_handlers.greeting_menu_callback(callback, state)

    @dp.callback_query(StateFilter(BroadcastStates.preview_broadcast, BroadcastStates.preview_greeting))
    async def preview_callbacks(callback: types.CallbackQuery, state: FSMContext):
        await menu_handlers.preview_callbacks(callback, state)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    @dp.callback_query(StateFilter(BroadcastStates.waiting_for_content))
    async def waiting_content_callbacks(callback: types.CallbackQuery, state: FSMContext):
        if callback.data == "cancel_action":
            await menu_handlers.cancel_action(callback, state)
        elif callback.data == "back_to_main":
            await menu_handlers.back_to_main_action(callback, state)

    @dp.callback_query(StateFilter(BroadcastStates.waiting_for_greeting))
    async def waiting_greeting_callbacks(callback: types.CallbackQuery, state: FSMContext):
        if callback.data == "cancel_action":
            await menu_handlers.cancel_action(callback, state)
        elif callback.data == "back_to_main":
            await menu_handlers.back_to_main_action(callback, state)

    @dp.callback_query(F.data == "cancel_action")
    async def cancel_callbacks(callback: types.CallbackQuery, state: FSMContext):
        await menu_handlers.cancel_action(callback, state)

    @dp.callback_query(F.data == "back_to_main")
    async def back_callbacks(callback: types.CallbackQuery, state: FSMContext):
        await menu_handlers.back_to_main_action(callback, state)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
    @dp.message(StateFilter(BroadcastStates.waiting_for_content))
    async def broadcast_content_handler(message: types.Message, state: FSMContext):
        await menu_handlers.handle_broadcast_content(message, state)

    @dp.message(StateFilter(BroadcastStates.waiting_for_greeting))
    async def greeting_content_handler(message: types.Message, state: FSMContext):
        await menu_handlers.handle_greeting_content(message, state)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM)
    @dp.message(StateFilter(None))
    async def client_messages_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        if message.from_user.id == FARMER_TELEGRAM_ID:
            # –ï—Å–ª–∏ —Ñ–µ—Ä–º–µ—Ä –ø–∏—à–µ—Ç –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await message.reply(
                "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = "text"
        content = ""

        if message.text:
            content_type = "text"
            content = message.text
        elif message.voice:
            content_type = "voice"
            content = f"voice_file_id:{message.voice.file_id}"
        elif message.video_note:
            content_type = "video_note"
            content = f"video_note_file_id:{message.video_note.file_id}"
        elif message.document:
            content_type = "document"
            content = f"document_file_id:{message.document.file_id}, filename:{message.document.file_name}"
        elif message.photo:
            content_type = "photo"
            content = f"photo_file_id:{message.photo[-1].file_id}"
        else:
            content_type = "other"
            content = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await message_handler.handle_client_message(
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username,
            content_type=content_type,
            content=content
        )