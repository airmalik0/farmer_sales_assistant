from typing import Optional, List, Dict, Any
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import desc
from ..models.trigger import Trigger, TriggerLog, TriggerStatus, TriggerAction
from ..schemas.trigger import TriggerCreate, TriggerUpdate, TriggerLogCreate
from .google_sheets_service import google_sheets_service, CarData
from datetime import datetime, timedelta, timezone
import logging
import json
import asyncio
import httpx

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
trigger_logger = logging.getLogger("triggers")
trigger_logger.setLevel(logging.INFO)


class TriggerService:
    @staticmethod
    def get_trigger(db: Session, trigger_id: int) -> Optional[Trigger]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ ID"""
        return db.query(Trigger).options(
            joinedload(Trigger.trigger_logs)
        ).filter(Trigger.id == trigger_id).first()

    @staticmethod
    def get_triggers(
        db: Session, 
        skip: int = 0, 
        limit: int = 100,
        status: Optional[TriggerStatus] = None
    ) -> List[Trigger]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        query = db.query(Trigger).options(joinedload(Trigger.trigger_logs))
        
        if status:
            query = query.filter(Trigger.status == status)
            
        return query.order_by(desc(Trigger.created_at)).offset(skip).limit(limit).all()

    @staticmethod
    def create_trigger(db: Session, trigger_data: TriggerCreate) -> Trigger:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º conditions –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        conditions_dict = trigger_data.conditions.model_dump(exclude_unset=True)
        
        db_trigger = Trigger(
            name=trigger_data.name,
            description=trigger_data.description,
            status=trigger_data.status,
            conditions=conditions_dict,
            action_type=trigger_data.action_type,
            action_config=trigger_data.action_config,
            check_interval_minutes=trigger_data.check_interval_minutes
        )
        
        db.add(db_trigger)
        db.commit()
        db.refresh(db_trigger)
        return db_trigger

    @staticmethod
    def update_trigger(
        db: Session, 
        trigger_id: int, 
        trigger_update: TriggerUpdate
    ) -> Optional[Trigger]:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä"""
        db_trigger = db.query(Trigger).filter(Trigger.id == trigger_id).first()
        if not db_trigger:
            return None
        
        update_data = trigger_update.model_dump(exclude_unset=True)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è conditions
        if 'conditions' in update_data and update_data['conditions']:
            update_data['conditions'] = update_data['conditions'].model_dump(exclude_unset=True)
        
        for field, value in update_data.items():
            setattr(db_trigger, field, value)
        
        db.commit()
        db.refresh(db_trigger)
        return db_trigger

    @staticmethod
    def delete_trigger(db: Session, trigger_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä"""
        db_trigger = db.query(Trigger).filter(Trigger.id == trigger_id).first()
        if db_trigger:
            db.delete(db_trigger)
            db.commit()
            return True
        return False

    @staticmethod
    def check_trigger_condition(trigger: Trigger, car: CarData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ª–æ–≤–∏—è–º —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        conditions = trigger.conditions
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        if 'car_id' in conditions and conditions['car_id']:
            if car.car_id != conditions['car_id']:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫—É
        if 'brand' in conditions and conditions['brand']:
            brands = conditions['brand'] if isinstance(conditions['brand'], list) else [conditions['brand']]
            if car.brand not in brands:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
        if 'model' in conditions and conditions['model']:
            models = conditions['model'] if isinstance(conditions['model'], list) else [conditions['model']]
            if car.model not in models:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏—é
        if 'location' in conditions and conditions['location']:
            if car.location != conditions['location']:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        if 'price_min' in conditions and conditions['price_min'] is not None:
            if car.price is None or car.price < conditions['price_min']:
                return False
        
        if 'price_max' in conditions and conditions['price_max'] is not None:
            if car.price is None or car.price > conditions['price_max']:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥
        if 'year_min' in conditions and conditions['year_min'] is not None:
            if car.year is None or car.year < conditions['year_min']:
                return False
        
        if 'year_max' in conditions and conditions['year_max'] is not None:
            if car.year is None or car.year > conditions['year_max']:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–µ–≥
        if 'mileage_max' in conditions and conditions['mileage_max'] is not None:
            if car.mileage is None or car.mileage > conditions['mileage_max']:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if 'status' in conditions and conditions['status']:
            statuses = conditions['status'] if isinstance(conditions['status'], list) else [conditions['status']]
            if car.status not in statuses:
                return False
        
        return True

    @staticmethod
    async def execute_trigger_action(
        db: Session, 
        trigger: Trigger, 
        car_data: CarData
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        action_result = {
            "success": False,
            "message": "",
            "data": {}
        }
        
        try:
            if trigger.action_type == TriggerAction.NOTIFY:
                result = await TriggerService._execute_notify_action(trigger, car_data)
                action_result.update(result)
            
            elif trigger.action_type == TriggerAction.CREATE_TASK:
                result = await TriggerService._execute_create_task_action(db, trigger, car_data)
                action_result.update(result)
            
            elif trigger.action_type == TriggerAction.WEBHOOK:
                result = await TriggerService._execute_webhook_action(trigger, car_data)
                action_result.update(result)
            
            else:
                action_result["message"] = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {trigger.action_type}"
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger.id}: {e}")
            action_result["message"] = str(e)
        
        return action_result

    @staticmethod
    async def _execute_notify_action(trigger: Trigger, car_data: CarData) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        from ..services.telegram_admin_service import TelegramAdminService
        
        config = trigger.action_config or {}
        message = config.get('message', f'–¢—Ä–∏–≥–≥–µ—Ä {trigger.name} —Å—Ä–∞–±–æ—Ç–∞–ª')
        channels = config.get('channels', ['telegram'])
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        formatted_message = TriggerService._format_message(message, car_data)
        
        notifications_sent = []
        success_count = 0
        
        for channel in channels:
            if channel == 'websocket':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
                notifications_sent.append(f'websocket: {formatted_message}')
                success_count += 1
            elif channel == 'telegram':
                success = await TelegramAdminService.send_notification(
                    f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä: {trigger.name}\n"
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_data.car_id}\n"
                    f"–¶–µ–Ω–∞: {car_data.price}\n"
                    f"–õ–æ–∫–∞—Ü–∏—è: {car_data.location}\n"
                    f"–ü—Ä–æ–±–µ–≥: {car_data.mileage}\n"
                    f"–°—Ç–∞—Ç—É—Å: {car_data.status}\n"
                    f"–¢—Ä–∏–≥–≥–µ—Ä: {trigger.name}\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message}"
                )
                notifications_sent.append(f'telegram: {"‚úÖ" if success else "‚ùå"} {formatted_message}')
                if success:
                    success_count += 1
        
        return {
            "success": success_count > 0,
            "message": f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(channels)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "data": {
                "notifications": notifications_sent,
                "formatted_message": formatted_message,
                "success_count": success_count
            }
        }

    @staticmethod
    async def _execute_create_task_action(
        db: Session, 
        trigger: Trigger, 
        car_data: CarData
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        from .task_service import TaskService
        from ..schemas.task import TaskCreate
        
        config = trigger.action_config or {}
        title = config.get('title', f'–ó–∞–¥–∞—á–∞ –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger.name}')
        description = config.get('description', f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_data.car_id} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º —Ç—Ä–∏–≥–≥–µ—Ä–∞')
        priority = config.get('priority', 'medium')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        formatted_title = TriggerService._format_message(title, car_data)
        formatted_description = TriggerService._format_message(description, car_data)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏ Task)
        task_data = TaskCreate(
            client_id=1,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
            description=f"{formatted_title}\n\n{formatted_description}\n\n–¢—Ä–∏–≥–≥–µ—Ä: {trigger.name}",
            priority=priority,
            source="trigger",
            trigger_id=trigger.id,
            extra_data={
                "trigger_name": trigger.name,
                "car_data": car_data.to_dict()
            }
        )
        
        task = TaskService.create_task(db, task_data, send_notification=True)
        
        return {
            "success": True,
            "message": "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞",
            "data": {
                "task_id": task.id,
                "title": formatted_title
            }
        }

    @staticmethod
    async def _execute_webhook_action(trigger: Trigger, car_data: CarData) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å webhook –¥–µ–π—Å—Ç–≤–∏–µ"""
        config = trigger.action_config or {}
        url = config.get('url')
        method = config.get('method', 'POST')
        headers = config.get('headers', {})
        
        if not url:
            return {
                "success": False,
                "message": "URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook"
            }
        
        payload = {
            "trigger_id": trigger.id,
            "trigger_name": trigger.name,
            "car_data": car_data.to_dict(),
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.request(
                method=method,
                url=url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            return {
                "success": response.is_success,
                "message": f"Webhook –≤—ã–∑–≤–∞–Ω: {response.status_code}",
                "data": {
                    "status_code": response.status_code,
                    "response_text": response.text[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                }
            }

    @staticmethod
    def _format_message(message: str, car_data: CarData) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        replacements = {
            '{car_id}': car_data.car_id or 'N/A',
            '{brand}': car_data.brand or 'N/A',
            '{model}': car_data.model or 'N/A',
            '{price}': f'${car_data.price:,.0f}' if car_data.price else 'N/A',
            '{location}': car_data.location or 'N/A',
            '{year}': str(car_data.year) if car_data.year else 'N/A',
            '{status}': car_data.status or 'N/A',
            '{mileage}': f'{car_data.mileage:,} –∫–º' if car_data.mileage else 'N/A'
        }
        
        formatted_message = message
        for placeholder, value in replacements.items():
            formatted_message = formatted_message.replace(placeholder, value)
        
        return formatted_message

    @staticmethod
    async def check_all_triggers(db: Session) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        now = datetime.now(timezone.utc)
        triggers = db.query(Trigger).filter(
            Trigger.status == TriggerStatus.ACTIVE
        ).all()
        
        trigger_logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(triggers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        triggers_to_check = []
        for trigger in triggers:
            if trigger.last_checked_at is None:
                triggers_to_check.append(trigger)
                trigger_logger.debug(f"–¢—Ä–∏–≥–≥–µ—Ä {trigger.name} (ID: {trigger.id}) –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è")
            else:
                time_since_check = now - trigger.last_checked_at
                if time_since_check.total_seconds() >= trigger.check_interval_minutes * 60:
                    triggers_to_check.append(trigger)
                    trigger_logger.debug(f"–¢—Ä–∏–≥–≥–µ—Ä {trigger.name} (ID: {trigger.id}) –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø—Ä–æ—à–ª–æ {time_since_check.total_seconds()} —Å–µ–∫—É–Ω–¥")
        
        trigger_logger.info(f"–ö –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–æ {len(triggers_to_check)} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
        
        if not triggers_to_check:
            return {
                "triggers_checked": 0,
                "triggers_fired": 0,
                "message": "–ù–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        cars = None
        max_retries = 3
        for attempt in range(max_retries):
            try:
                cars = google_sheets_service.get_sheet_data()
                if cars:
                    break
                trigger_logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets")
            except Exception as e:
                trigger_logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
                if attempt < max_retries - 1:
                    import time
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        if not cars:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            for trigger in triggers_to_check:
                trigger.last_checked_at = now
            db.commit()
            
            trigger_logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return {
                "triggers_checked": len(triggers_to_check),
                "triggers_fired": 0,
                "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {len(triggers_to_check)} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets",
                "error": "Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        
        trigger_logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ Google Sheets")
        fired_triggers = []
        triggers_with_errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫
        for trigger in triggers_to_check:
            try:
                trigger_logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä {trigger.name} (ID: {trigger.id})")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                trigger.last_checked_at = now
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                trigger_fired = False
                for car in cars:
                    try:
                        if TriggerService.check_trigger_condition(trigger, car):
                            trigger_logger.info(f"–¢—Ä–∏–≥–≥–µ—Ä {trigger.name} —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car.car_id}")
                            
                            fired_triggers.append({
                                "trigger": trigger,
                                "car": car
                            })
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–∞
                            trigger.last_triggered_at = now
                            trigger.trigger_count += 1
                            trigger_fired = True
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
                            log_entry = TriggerLog(
                                trigger_id=trigger.id,
                                trigger_data=car.to_dict(),
                                success=True
                            )
                            db.add(log_entry)
                            
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
                            try:
                                action_result = await TriggerService.execute_trigger_action(db, trigger, car)
                                trigger_logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {action_result.get('message', 'OK')}")
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏—è
                                log_entry.action_result = action_result
                                log_entry.success = action_result.get('success', False)
                                
                            except Exception as action_error:
                                trigger_logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger.name}: {action_error}")
                                log_entry.success = False
                                log_entry.error_message = str(action_error)
                    
                    except Exception as car_error:
                        trigger_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car.car_id} –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger.name}: {car_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
                db.commit()
                
            except Exception as trigger_error:
                trigger_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger.name} (ID: {trigger.id}): {trigger_error}")
                triggers_with_errors.append({
                    "trigger_id": trigger.id,
                    "trigger_name": trigger.name,
                    "error": str(trigger_error)
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    trigger.last_checked_at = now
                    db.commit()
                except Exception as commit_error:
                    trigger_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger.id}: {commit_error}")
                    db.rollback()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        try:
            db.commit()
        except Exception as final_commit_error:
            trigger_logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {final_commit_error}")
            db.rollback()
        
        result = {
            "triggers_checked": len(triggers_to_check),
            "triggers_fired": len(fired_triggers),
            "triggers_with_errors": len(triggers_with_errors),
            "message": f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(triggers_to_check)} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, —Å—Ä–∞–±–æ—Ç–∞–ª–æ {len(fired_triggers)}, –æ—à–∏–±–æ–∫ {len(triggers_with_errors)}",
            "fired_triggers": [
                {
                    "trigger_name": item["trigger"].name,
                    "car_id": item["car"].car_id
                }
                for item in fired_triggers
            ]
        }
        
        if triggers_with_errors:
            result["errors"] = triggers_with_errors
        
        trigger_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {result['message']}")
        return result

    @staticmethod
    def get_trigger_logs(
        db: Session, 
        trigger_id: int = None, 
        skip: int = 0, 
        limit: int = 100
    ) -> List[TriggerLog]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        query = db.query(TriggerLog)
        
        if trigger_id:
            query = query.filter(TriggerLog.trigger_id == trigger_id)
        
        return query.order_by(desc(TriggerLog.triggered_at)).offset(skip).limit(limit).all()

    @staticmethod
    def get_trigger_stats(db: Session, trigger_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É"""
        trigger = db.query(Trigger).filter(Trigger.id == trigger_id).first()
        if not trigger:
            return {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now(timezone.utc) - timedelta(days=30)
        recent_logs = db.query(TriggerLog).filter(
            TriggerLog.trigger_id == trigger_id,
            TriggerLog.triggered_at >= thirty_days_ago
        ).all()
        
        return {
            "total_triggers": trigger.trigger_count,
            "triggers_last_30_days": len(recent_logs),
            "last_triggered": trigger.last_triggered_at,
            "last_checked": trigger.last_checked_at,
            "status": trigger.status.value,
            "check_interval_minutes": trigger.check_interval_minutes
        } 