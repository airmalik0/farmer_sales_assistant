import asyncio
import logging
from typing import Optional, Dict, Any
import httpx
from ..core.config import settings
from ..models.task import Task
from ..models.client import Client
from sqlalchemy.orm import Session

logger = logging.getLogger(__name__)

# Telegram Bot API URL
TELEGRAM_API_URL = f"https://api.telegram.org/bot{settings.telegram_bot_token}"


class TelegramService:
    
    @staticmethod
    async def send_message(chat_id: int, text: str) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
        async with httpx.AsyncClient() as client:
            url = f"{TELEGRAM_API_URL}/sendMessage"
            payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
            try:
                response = await client.post(url, json=payload)
                response.raise_for_status()
                return response.json()
            except httpx.HTTPStatusError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e.response.text}")
                return None
            except httpx.RequestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: {e}")
                return None

    @staticmethod
    async def send_task_notification_to_farmer(task: Task, client: Client) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        if not settings.farmer_telegram_id:
            logger.warning("FARMER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        client_name = f"{client.first_name or ''} {client.last_name or ''}".strip()
        if not client_name:
            client_name = client.username or f"ID:{client.telegram_id}"
        
        priority_emoji = {
            "low": "üîµ",
            "normal": "üü°", 
            "high": "üî¥"
        }.get(task.priority, "‚ö™")
        
        due_date_text = ""
        if task.due_date:
            due_date_text = f"\nüìÖ <b>–°—Ä–æ–∫:</b> {task.due_date.strftime('%d.%m.%Y')}"
        
        source_text = ""
        if task.source == "trigger":
            source_text = "\nü§ñ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –¢—Ä–∏–≥–≥–µ—Ä"
        elif task.source == "ai":
            source_text = "\nüß† <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> AI –∞–Ω–∞–ª–∏–∑"
        
        message = f"""
{priority_emoji} <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}{due_date_text}{source_text}

üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> {task.id}
""".strip()
        
        result = await TelegramService.send_message(
            chat_id=settings.farmer_telegram_id,
            text=message
        )
        
        if result:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–µ—Ä–º–µ—Ä—É")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task.id}")
            return False

    @staticmethod
    async def send_task_reminder_to_farmer(task: Task, client: Client) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        if not settings.farmer_telegram_id:
            logger.warning("FARMER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        client_name = f"{client.first_name or ''} {client.last_name or ''}".strip()
        if not client_name:
            client_name = client.username or f"ID:{client.telegram_id}"
        
        message = f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}
üìÖ <b>–°—Ä–æ–∫ –±—ã–ª:</b> {task.due_date.strftime('%d.%m.%Y')}

‚ùó –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!
üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> {task.id}
""".strip()
        
        result = await TelegramService.send_message(
            chat_id=settings.farmer_telegram_id,
            text=message
        )
        
        if result:
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–µ—Ä–º–µ—Ä—É")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task.id}")
            return False

    @staticmethod
    async def send_trigger_notification_to_farmer(
        trigger_name: str,
        car_data: Dict[str, Any],
        formatted_message: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        if not settings.farmer_telegram_id:
            logger.warning("FARMER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        car_id = car_data.get('car_id', 'N/A')
        brand = car_data.get('brand', 'N/A')
        model = car_data.get('model', 'N/A')
        price = car_data.get('price')
        location = car_data.get('location', 'N/A')
        
        price_text = f"${price:,.0f}" if price else "N/A"
        
        message = f"""
üîî <b>–¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!</b>

üéØ <b>–¢—Ä–∏–≥–≥–µ—Ä:</b> {trigger_name}
üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {car_id} - {brand} {model}
üí∞ <b>–¶–µ–Ω–∞:</b> {price_text}
üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {location}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {formatted_message}
""".strip()
        
        result = await TelegramService.send_message(
            chat_id=settings.farmer_telegram_id,
            text=message
        )
        
        if result:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∏–≥–≥–µ—Ä–µ '{trigger_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–µ—Ä–º–µ—Ä—É")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∏–≥–≥–µ—Ä–µ '{trigger_name}'")
            return False

    @staticmethod
    async def send_daily_tasks_summary(db: Session) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∑–∞–¥–∞—á —Ñ–µ—Ä–º–µ—Ä—É"""
        if not settings.farmer_telegram_id:
            logger.warning("FARMER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        from ..services.task_service import TaskService
        from datetime import date, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
        today = date.today()
        overdue_tasks = db.query(Task).filter(
            Task.due_date < today,
            Task.is_completed == False
        ).count()
        
        today_tasks = db.query(Task).filter(
            Task.due_date == today,
            Task.is_completed == False
        ).count()
        
        tomorrow_tasks = db.query(Task).filter(
            Task.due_date == today + timedelta(days=1),
            Task.is_completed == False
        ).count()
        
        total_active = db.query(Task).filter(Task.is_completed == False).count()
        
        message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á</b>

üìÖ <b>–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ: {overdue_tasks} {'‚ùó' if overdue_tasks > 0 else '‚úÖ'}
‚Ä¢ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: {today_tasks}
‚Ä¢ –ù–∞ –∑–∞–≤—Ç—Ä–∞: {tomorrow_tasks}
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_active}

{f'‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å {overdue_tasks} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!' if overdue_tasks > 0 else '‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç'}
""".strip()
        
        result = await TelegramService.send_message(
            chat_id=settings.farmer_telegram_id,
            text=message
        )
        
        if result:
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–µ—Ä–º–µ—Ä—É")
            return True
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∑–∞–¥–∞—á")
            return False 