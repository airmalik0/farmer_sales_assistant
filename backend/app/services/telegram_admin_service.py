import httpx
import logging
from typing import Dict
from ..core.config import settings

logger = logging.getLogger(__name__)


class TelegramAdminService:
    API_URL = f"https://api.telegram.org/bot{settings.telegram_bot_token}"
    FARMER_ID = settings.farmer_telegram_id
    
    @staticmethod
    async def send_notification(message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
        url = f"{TelegramAdminService.API_URL}/sendMessage"
        payload = {
            "chat_id": TelegramAdminService.FARMER_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(url, json=payload)
                response.raise_for_status()
                return True
            except httpx.RequestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
                return False
    
    @staticmethod
    async def send_fallback_message(telegram_id: int, text: str):
        """Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API"""
        url = f"{TelegramAdminService.API_URL}/sendMessage"
        payload = {
            "chat_id": telegram_id,
            "text": f"üì± [Fallback] {text}",
            "parse_mode": "HTML"
        }
        
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(url, json=payload)
                response.raise_for_status()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ fallback
                await TelegramAdminService.send_notification(
                    f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}"
                )
                
                return response.json()
            except httpx.RequestError as e:
                logger.error(f"Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                return None
    
    @staticmethod
    async def send_broadcast_summary(sent_count: int, failed_count: int, channels: Dict[str, int]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        message = f"""
üì¢ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏</b>

‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –û—à–∏–±–∫–∏: {failed_count}

üìä <b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>
"""
        for channel, count in channels.items():
            channel_name = "WhatsApp" if channel == "whatsapp" else "Telegram"
            message += f"‚Ä¢ {channel_name}: {count}\n"
            
        await TelegramAdminService.send_notification(message)
    
    @staticmethod
    async def send_new_client_notification(client):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ"""
        channel_name = "WhatsApp" if client.provider == "whatsapp" else "Telegram"
        message = f"""
üë§ <b>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç</b>

üì± –ö–∞–Ω–∞–ª: {channel_name}
üë§ –ò–º—è: {client.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {client.phone_number or client.username or client.sender_external_id}
üïê –í—Ä–µ–º—è: {client.created_at.strftime('%d.%m.%Y %H:%M')}
"""
        await TelegramAdminService.send_notification(message) 