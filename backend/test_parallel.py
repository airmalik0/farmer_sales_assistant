"""–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""

import os
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LangSmith
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_API_KEY"] = "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"
os.environ["LANGCHAIN_PROJECT"] = "farmer-crm-parallel-test"
os.environ["LANGCHAIN_ENDPOINT"] = "https://api.smith.langchain.com"

print("\n" + "="*50)
print("üöÄ –¢–µ—Å—Ç –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤")
print("="*50 + "\n")

from app.models.message import Message, SenderType
from app.services.ai.parallel_analyzer import parallel_analyzer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_test_messages():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return [
        Message(
            client_id=1,
            sender=SenderType.client,
            content="–ü—Ä–∏–≤–µ—Ç! –Ø –ü–µ—Ç—Ä –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞. –ò—â—É Mercedes GLE 2023, –±—é–¥–∂–µ—Ç 100-120–∫$. –ú–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è 25 –¥–µ–∫–∞–±—Ä—è.",
            content_type="text",
            income=True,
            timestamp=datetime.now()
        ),
        Message(
            client_id=1,
            sender=SenderType.farmer,
            content="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ü–µ—Ç—Ä! –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –î–∞–≤–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è?",
            content_type="text",
            income=False,
            timestamp=datetime.now()
        ),
        Message(
            client_id=1,
            sender=SenderType.client,
            content="–î–∞, –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –ø–æ–¥—Ö–æ–¥–∏—Ç. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á–µ—Ä–Ω—ã–π –∏–ª–∏ —Å–µ—Ä—ã–π —Ü–≤–µ—Ç, –ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.",
            content_type="text",
            income=True,
            timestamp=datetime.now()
        )
    ]


def test_sequential():
    """–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("–ó–∞–ø—É—Å–∫ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    messages = create_test_messages()
    
    start_time = time.time()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    from app.services.ai.task_agent import task_agent
    from app.services.ai.dossier_agent import dossier_agent
    from app.services.ai.car_interest_agent import car_interest_agent
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    task_result = task_agent.analyze(1, "–ü–µ—Ç—Ä", messages)
    dossier_result = dossier_agent.analyze(1, "–ü–µ—Ç—Ä", messages)
    car_result = car_interest_agent.analyze(1, "–ü–µ—Ç—Ä", messages)
    
    sequential_time = time.time() - start_time
    
    return sequential_time, {
        "task": task_result,
        "dossier": dossier_result,
        "car_interest": car_result
    }


def test_parallel():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("–ó–∞–ø—É—Å–∫ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    messages = create_test_messages()
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    result = parallel_analyzer.analyze_all(
        client_id=1,
        client_name="–ü–µ—Ç—Ä",
        chat_messages=messages
    )
    
    parallel_time = time.time() - start_time
    
    return parallel_time, result


if __name__ == "__main__":
    print("üìù –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –∫–ª–∏–µ–Ω—Ç –ü–µ—Ç—Ä –∏—â–µ—Ç Mercedes GLE\n")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("1Ô∏è‚É£ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞:")
    seq_time, seq_results = test_sequential()
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {seq_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   ‚úÖ Task: {seq_results['task'].get('confirmed', False)}")
    print(f"   ‚úÖ Dossier: {seq_results['dossier'].get('confirmed', False)}")
    print(f"   ‚úÖ Car Interest: {seq_results['car_interest'].get('confirmed', False)}")
    
    print("\n2Ô∏è‚É£ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞:")
    par_time, par_results = test_parallel()
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {par_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   ‚úÖ All confirmed: {par_results['all_confirmed']}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {seq_time:.2f}—Å")
    print(f"   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {par_time:.2f}—Å")
    speedup = seq_time / par_time if par_time > 0 else 0
    print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
    print(f"   ‚è±Ô∏è –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {seq_time - par_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if par_results['errors']:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
        for agent, error in par_results['errors'].items():
            print(f"   - {agent}: {error}")
    
    print("="*50)