"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å tool calling"""

import os
import asyncio
import logging
from datetime import datetime
from typing import List

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è LangSmith –î–û –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_API_KEY"] = "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"
os.environ["LANGCHAIN_PROJECT"] = "farmer-crm-agents-test"
os.environ["LANGCHAIN_ENDPOINT"] = "https://api.smith.langchain.com"

print("\n" + "="*50)
print("üîç LangSmith —Ç—Ä–µ–π—Å–∏–Ω–≥ –í–ö–õ–Æ–ß–ï–ù!")
print(f"üìä –ü—Ä–æ–µ–∫—Ç: farmer-crm-agents-test")
print(f"üîó URL: https://smith.langchain.com/o/8ccfed96-3517-53ea-8c94-1dc19e3c4991/projects/p/farmer-crm-agents-test")
print("="*50 + "\n")

from app.models.message import Message, SenderType
from app.services.ai.task_agent import task_agent
from app.services.ai.dossier_agent import dossier_agent
from app.services.ai.car_interest_agent import car_interest_agent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_test_messages() -> List[Message]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    messages = []
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    msg1 = Message(
        client_id=1,
        sender=SenderType.client,
        content="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω, —è –∏–∑ –ú–æ—Å–∫–≤—ã. –ò—â—É BMW X5 2022 –≥–æ–¥–∞, –±—é–¥–∂–µ—Ç –¥–æ 65000$. –£ –º–µ–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è 15 —è–Ω–≤–∞—Ä—è, –º–æ–∂–µ—Ç –±—É–¥–µ—Ç —Å–∫–∏–¥–∫–∞? :)",
        content_type="text",
        income=True,
        timestamp=datetime.now()
    )
    messages.append(msg1)
    
    # –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    msg2 = Message(
        client_id=1,
        sender=SenderType.farmer,
        content="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ò–≤–∞–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∑–∞—Ä–∞–Ω–µ–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω—ã–π BMW X5. –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π?",
        content_type="text",
        income=False,
        timestamp=datetime.now()
    )
    messages.append(msg2)
    
    # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    msg3 = Message(
        client_id=1,
        sender=SenderType.client,
        content="–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 15:00. –ú–Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç –ª—é–±–æ–π —Ü–≤–µ—Ç, –∫—Ä–æ–º–µ –∫—Ä–∞—Å–Ω–æ–≥–æ. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–π –∫—Ä—ã—à–µ–π.",
        content_type="text",
        income=True,
        timestamp=datetime.now()
    )
    messages.append(msg3)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    msg4 = Message(
        client_id=1,
        sender=SenderType.farmer,
        content="–û—Ç–ª–∏—á–Ω–æ, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å! –ó–∞–≤—Ç—Ä–∞ –≤ 15:00 —Å–æ–∑–≤–∞–Ω–∏–≤–∞–µ–º—Å—è. –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç—ã BMW X5 —Å –ø–∞–Ω–æ—Ä–∞–º–æ–π.",
        content_type="text",
        income=False,
        timestamp=datetime.now()
    )
    messages.append(msg4)
    
    return messages


def test_task_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∑–∞–¥–∞—á"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Task Agent")
    logger.info("=" * 50)
    
    messages = create_test_messages()
    
    try:
        result = task_agent.analyze(
            client_id=1,
            client_name="–ò–≤–∞–Ω",
            chat_messages=messages
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á:")
        logger.info(f"–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: {result.get('new_tasks', [])}")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {result.get('updated_tasks', [])}")
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {result.get('completed_task_ids', [])}")
        logger.info(f"–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {result.get('deleted_task_ids', [])}")
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {result.get('confirmed', False)}")
        logger.info(f"–û—à–∏–±–∫–∏: {result.get('errors', [])}")
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Task Agent: {e}")
        return None


def test_dossier_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–æ—Å—å–µ"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dossier Agent")
    logger.info("=" * 50)
    
    messages = create_test_messages()
    
    try:
        result = dossier_agent.analyze(
            client_id=1,
            client_name="–ò–≤–∞–Ω",
            chat_messages=messages
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—å–µ:")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result.get('updates', {})}")
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {result.get('confirmed', False)}")
        logger.info(f"–û—à–∏–±–∫–∏: {result.get('errors', [])}")
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Dossier Agent: {e}")
        return None


def test_car_interest_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Car Interest Agent")
    logger.info("=" * 50)
    
    messages = create_test_messages()
    
    try:
        result = car_interest_agent.analyze(
            client_id=1,
            client_name="–ò–≤–∞–Ω",
            chat_messages=messages
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result.get('updates', {})}")
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {result.get('confirmed', False)}")
        logger.info(f"–û—à–∏–±–∫–∏: {result.get('errors', [])}")
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Car Interest Agent: {e}")
        return None


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    task_result = test_task_agent()
    print("\n")
    
    dossier_result = test_dossier_agent()
    print("\n")
    
    car_interest_result = test_car_interest_agent()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("=" * 50)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ tools
    all_confirmed = True
    if task_result:
        if task_result.get('confirmed'):
            logger.info("‚úÖ Task Agent —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ tools")
        else:
            logger.warning("‚ö†Ô∏è Task Agent –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            all_confirmed = False
    
    if dossier_result:
        if dossier_result.get('confirmed'):
            logger.info("‚úÖ Dossier Agent —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ tools")
        else:
            logger.warning("‚ö†Ô∏è Dossier Agent –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            all_confirmed = False
    
    if car_interest_result:
        if car_interest_result.get('confirmed'):
            logger.info("‚úÖ Car Interest Agent —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ tools")
        else:
            logger.warning("‚ö†Ô∏è Car Interest Agent –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            all_confirmed = False
    
    if all_confirmed:
        logger.info("\nüéâ –í–°–ï –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û –° TOOL CALLING!")
    else:
        logger.warning("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")