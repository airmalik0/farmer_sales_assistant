import { Provider, ProviderInfo, Client } from '../types';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
export const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

export const formatTime = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  });
};

export const formatDateShort = (dateString: string): string => {
  const date = new Date(dateString);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays === 1) {
    return '–°–µ–≥–æ–¥–Ω—è';
  } else if (diffDays === 2) {
    return '–í—á–µ—Ä–∞';
  } else if (diffDays <= 7) {
    return `${diffDays - 1} –¥–Ω. –Ω–∞–∑–∞–¥`;
  } else {
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit'
    });
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
export const getProviderInfo = (provider: Provider): ProviderInfo => {
  switch (provider) {
    case 'whatsapp':
      return {
        name: 'WhatsApp',
        icon: 'üí¨', // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–∫–æ–Ω–∫—É
        color: 'text-green-600'
      };
    case 'telegram_personal':
      return {
        name: 'Telegram',
        icon: '‚úàÔ∏è', // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–∫–æ–Ω–∫—É  
        color: 'text-blue-600'
      };
    default:
      return {
        name: 'Unknown',
        icon: '‚ùì',
        color: 'text-gray-600'
      };
  }
};

export const getProviderIcon = (provider: Provider): string => {
  return getProviderInfo(provider).icon;
};

export const getProviderName = (provider: Provider): string => {
  return getProviderInfo(provider).name;
};

export const getProviderColor = (provider: Provider): string => {
  return getProviderInfo(provider).color;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
export const getClientDisplayName = (client: Client): string => {
  if (client.name) {
    return client.name;
  }
  
  if (client.username) {
    return `@${client.username}`;
  }
  
  if (client.phone_number) {
    return client.phone_number;
  }
  
  return client.sender_external_id || `ID: ${client.id}`;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
export const getClientContact = (client: Client): string => {
  if (client.provider === 'whatsapp' && client.phone_number) {
    return client.phone_number;
  }
  
  if (client.provider === 'telegram_personal' && client.username) {
    return `@${client.username}`;
  }
  
  return client.sender_external_id;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 –ë';
  
  const k = 1024;
  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –≤–ª–æ–∂–µ–Ω–∏—è
export const isImageAttachment = (mimeType: string): boolean => {
  return mimeType.startsWith('image/');
};

export const isVideoAttachment = (mimeType: string): boolean => {
  return mimeType.startsWith('video/');
};

export const isAudioAttachment = (mimeType: string): boolean => {
  return mimeType.startsWith('audio/');
};

export const isDocumentAttachment = (mimeType: string): boolean => {
  return !isImageAttachment(mimeType) && 
         !isVideoAttachment(mimeType) && 
         !isAudioAttachment(mimeType);
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
export const getFileTypeIcon = (mimeType: string): string => {
  if (isImageAttachment(mimeType)) return 'üñºÔ∏è';
  if (isVideoAttachment(mimeType)) return 'üé•';
  if (isAudioAttachment(mimeType)) return 'üéµ';
  if (mimeType.includes('pdf')) return 'üìÑ';
  if (mimeType.includes('word') || mimeType.includes('document')) return 'üìù';
  if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'üìä';
  return 'üìé';
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∑–∞–¥–∞—á
export const formatPriority = (priority: string): string => {
  switch (priority) {
    case 'high':
      return '–í—ã—Å–æ–∫–∏–π';
    case 'normal':
      return '–û–±—ã—á–Ω—ã–π';
    case 'low':
      return '–ù–∏–∑–∫–∏–π';
    default:
      return priority;
  }
};

export const getPriorityColor = (priority: string): string => {
  switch (priority) {
    case 'high':
      return 'text-red-600 bg-red-50';
    case 'normal':
      return 'text-blue-600 bg-blue-50';
    case 'low':
      return 'text-gray-600 bg-gray-50';
    default:
      return 'text-gray-600 bg-gray-50';
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
export const getMessageStatusIcon = (status: string): string => {
  switch (status) {
    case 'sent':
      return '‚úì';
    case 'delivered':
      return '‚úì‚úì';
    case 'read':
      return '‚úì‚úì';
    case 'error':
      return '‚ùå';
    default:
      return '‚è≥';
  }
};

export const getMessageStatusColor = (status: string): string => {
  switch (status) {
    case 'sent':
      return 'text-gray-500';
    case 'delivered':
      return 'text-gray-500';
    case 'read':
      return 'text-blue-500';
    case 'error':
      return 'text-red-500';
    default:
      return 'text-gray-400';
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
export const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) return text;
  return text.substr(0, maxLength) + '...';
};